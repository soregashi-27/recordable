name: deploy

on:
  push:
    branches:
      - main
      - feature/cicd_pushImagesToEcr

env:
  AWS_REGION: ap-northeast-1

jobs:
  deploy:
    name: Deploy app to AWS Fargate
    runs-on: ubuntu-latest

    steps:
      - name: Configure aws credentials for prod
        # if: ${{ github.ref == 'refs/heads/main' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.PROD_AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800

      - name: Set env vars for prod
        # if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "ENV_NAME=prod" >> $GITHUB_ENV

      # TODO: dev環境へDeployを可能とする処理を追加（リリース後）

      - uses: actions/checkout@v2

      - run: docker compose up -d --build app web

      - name: Cache composer
        id: cache-composer
        uses: actions/cache@v2
        with:
          path:backend/vendor
          key: composer-v1-${{ hashFiles('backend/composer.lock') }}

      - run: docker compose exec -T app composer install -n --prefer-dist --no-dev
        if: ${{ !steps.cache-npm-ci.outputs.cache-hit }}

      - name: Cache npm
        id: cache-npm-ci
        uses: actions/cache@v2
        with: path: backend/node_modules
        key: npm-v1${{ hashFiles('backend/package-lock.json') }}

      - run: docker-compose exec -T web npm ci
        if: ${{ !steps.cache-npm-ci.outputs.cache-hit }}

      - run: docker compose exec -T web npm run prod
